name: Node.js CI Workflow

on:
  workflow_call:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20.x'
      node_versions:
        description: 'JSON array of Node.js versions to test'
        required: false
        type: string
        default: '["18.x", "20.x"]'
      working_directory:
        description: 'Working directory for the job'
        required: false
        type: string
        default: '.'
      package_manager:
        description: 'Package manager to use (npm, pnpm, yarn)'
        required: false
        type: string
        default: 'pnpm'
      build_command:
        description: 'Build command to run'
        required: false
        type: string
        default: 'build'
      test_command:
        description: 'Test command to run'
        required: false
        type: string
        default: 'test'
      lint_command:
        description: 'Lint command to run'
        required: false
        type: string
        default: 'lint'
      environment:
        description: 'Environment to use (e.g., production, staging)'
        required: false
        type: string
    secrets:
      npm_token:
        description: 'NPM token for private packages'
        required: false

jobs:
  node-ci:
    uses: ./.github/workflows/base-ci.yml
    with:
      working_directory: ${{ inputs.working_directory }}
      cache_dependencies: true
      artifact_path: ${{ inputs.working_directory }}/dist
      matrix_config: |
        {
          "include": [
            {
              "node-version": ${{ inputs.node_versions }}
            }
          ]
        }
      environment: ${{ inputs.environment }}

  setup-node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(inputs.node_versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ inputs.package_manager }}
          registry-url: 'https://registry.npmjs.org'
          cache-dependency-path: |
            ${{ inputs.working_directory }}/package-lock.json
            ${{ inputs.working_directory }}/pnpm-lock.yaml
            ${{ inputs.working_directory }}/yarn.lock

      - name: Install pnpm
        if: inputs.package_manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: '8'
          run_install: false

      - name: Get package manager cache directory
        id: cache-dir
        run: |
          case "${{ inputs.package_manager }}" in
            pnpm)
              echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT
              ;;
            yarn)
              echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
              ;;
            npm)
              echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Setup package manager cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ inputs.package_manager }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.package_manager }}-

      - name: Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

  lint:
    needs: setup-node
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Run linter
        run: ${{ inputs.package_manager }} run ${{ inputs.lint_command }}

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(inputs.node_versions) }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Run tests
        run: ${{ inputs.package_manager }} run ${{ inputs.test_command }}

  build:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Build
        run: ${{ inputs.package_manager }} run ${{ inputs.build_command }}
        env:
          NODE_ENV: production
