name: Python Docker CI/CD

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      working_directory:
        description: 'Working directory for the project'
        required: false
        type: string
        default: '.'
      docker_registry:
        description: 'Docker registry to push images to'
        required: false
        type: string
        default: 'ghcr.io'
      run_integration_tests:
        description: 'Whether to run integration tests'
        required: false
        type: boolean
        default: true
      platforms:
        description: 'Docker platforms to build for'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'

env:
  DOCKER_REGISTRY: ${{ inputs.docker_registry }}
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: ${{ inputs.python_version }}

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.working_directory }}/pyproject.toml
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run black
        run: black --check src tests
      
      - name: Run ruff
        run: ruff check src tests
      
      - name: Run mypy
        run: mypy src

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.working_directory }}/pyproject.toml
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run tests with coverage
        run: |
          pytest --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          file: ${{ inputs.working_directory }}/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.working_directory }}/pyproject.toml
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit
      
      - name: Run Bandit security scan
        run: bandit -r src -f json -o bandit-report.json || true
      
      - name: Run Safety check
        run: safety check --json -o safety-report.json || true
      
      - name: Run pip-audit
        run: pip-audit --desc --format json --output pip-audit-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            ${{ inputs.working_directory }}/*-report.json

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.working_directory }}
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    needs: build-docker
    runs-on: ubuntu-latest
    if: inputs.run_integration_tests
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.working_directory }}/pyproject.toml
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest httpx
      
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          # Wait for services to be ready
          sleep 10
      
      - name: Run integration tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Run any integration tests if they exist
          if [ -d "tests/integration" ]; then
            pytest tests/integration -v
          fi
      
      - name: Show Docker logs on failure
        if: failure()
        run: docker-compose logs
      
      - name: Stop services
        if: always()
        run: docker-compose down

  release:
    name: Release
    needs: [lint, test, security, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build distribution
        run: python -m build
      
      - name: Check distribution
        run: twine check dist/*
      
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -n "$TWINE_PASSWORD" ]; then
            twine upload dist/*
          else
            echo "PyPI token not set, skipping upload"
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ inputs.working_directory }}/dist/*
          generate_release_notes: true
          draft: false
          prerelease: false 